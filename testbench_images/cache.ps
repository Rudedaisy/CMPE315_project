%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Unknown
%%Title: Window .printEngine1.page.layout
%%CreationDate: Mon Nov 12 11:58:27 2018
%%BoundingBox: 0 0 613 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%DocumentNeededResources: font Fixed
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog

%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
0.0 0.0 translate
90 rotate
0.96 0.96 scale
0 -638 translate
0 638 moveto 825 638 lineto 825 0 lineto 0 0 lineto closepath clip newpath
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
788 601 [
[(Page 1 of 1)]
] 13 -1 0 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
788 37 [
[(Printed by SimVision from Cadence Design Systems, Inc.)]
] 13 -1 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
37 37 [
[(Printed on Mon Nov 12 11:58:25 AM EST 2018)]
] 13 -0 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
37 601 [
[(cache - SimVision)]
] 13 -0 0 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 524 [
[(Cursor-Baseline = )]
] 13 -1 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 524 [
[(500ns)]
] 13 -0 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 538 [
[(Baseline = )]
] 13 -1 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 538 [
[(0)]
] 13 -0 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 552 [
[(Cursor = )]
] 13 -1 1 0 false DrawText
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
145 552 [
[(500ns)]
] 13 -0 1 0 false DrawText
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
37 361 translate
1.04167 1.03226 scale
0 -6 translate
0 6 168 161 SetClipRegion
%% including "/tmp/tmp1sl22438.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.slist
%%CreationDate: Mon Nov 12 11:58:25 2018
%%BoundingBox: 0 6 168 161
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Fixed
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
0.0 160.0 translate
0.9596 0.9596 scale
0 -160 translate
0 160 moveto 175 160 lineto 175 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 160 moveto
175 160 lineto
175 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 160 moveto
174 160 lineto
174 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 159 moveto
173 159 lineto
173 139 lineto
1 139 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 139 moveto
173 139 lineto
173 119 lineto
1 119 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 119 moveto
173 119 lineto
173 99 lineto
1 99 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 99 moveto
173 99 lineto
173 79 lineto
1 79 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 79 moveto
173 79 lineto
173 59 lineto
1 59 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 59 moveto
173 59 lineto
173 39 lineto
1 39 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 39 moveto
173 39 lineto
173 19 lineto
1 19 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 19 moveto
173 19 lineto
173 -1 lineto
1 -1 lineto
closepath
fill
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 148 moveto
10 8 lineto
stroke
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 148 moveto
26 148 lineto
stroke
grestore
gsave
24 142 translate
/TkPhoto { 
  gsave 
  32 dict begin 
  /tinteger exch def 
  /transparent 1 string def 
  transparent 0 tinteger put 
  /olddict exch def 
  olddict /DataSource get dup type /filetype ne { 
    olddict /DataSource 3 -1 roll 
    0 () /SubFileDecode filter put 
  } { 
    pop 
  } ifelse 
  /newdict olddict maxlength dict def 
  olddict newdict copy pop 
  /w newdict /Width get def 
  /crpp newdict /Decode get length 2 idiv def 
  /str w string def 
  /pix w crpp mul string def 
  /substrlen 2 w log 2 log div floor exp cvi def 
  /substrs [ 
  { 
     substrlen string 
     0 1 substrlen 1 sub { 
       1 index exch tinteger put 
     } for 
     /substrlen substrlen 2 idiv def 
     substrlen 0 eq {exit} if 
  } loop 
  ] def 
  /h newdict /Height get def 
  1 w div 1 h div matrix scale 
  olddict /ImageMatrix get exch matrix concatmatrix 
  matrix invertmatrix concat 
  newdict /Height 1 put 
  newdict /DataSource pix put 
  /mat [w 0 0 h 0 0] def 
  newdict /ImageMatrix mat put 
  0 1 h 1 sub { 
    mat 5 3 -1 roll neg put 
    olddict /DataSource get str readstring pop pop 
    /tail str def 
    /x 0 def 
    olddict /DataSource get pix readstring pop pop 
    { 
      tail transparent search dup /done exch not def 
      {exch pop exch pop} if 
      /w1 exch length def 
      w1 0 ne { 
        newdict /DataSource  pix x crpp mul w1 crpp mul getinterval put 
        newdict /Width w1 put 
        mat 4 x neg put 
        /x x w1 add def 
        newdict image 
        /tail tail w1 tail length w1 sub getinterval def 
      } if 
      done {exit} if 
      tail substrs { 
        anchorsearch {pop} if 
      } forall 
      /tail exch def 
      tail length 0 eq {exit} if 
      /x w tail length sub def 
    } loop 
  } for 
  end 
  grestore 
} bind def 


/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 20
  /Height 12
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 12]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4B618B4E65914E65914E65914E65914E65914E65914E65914E65914E6591
4E6591495F8800000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF010101010000000000000000000000004E6591FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000
0000000000004E6591F0F2F8788DC1788DC1788DC1788DC1788DC1788DC1
788DC1788DC1F0F2F84E659100000000000000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E6591E1E5F1
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1E1E5F14E6591
0000000000000000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101000000000000FFFF00FFFF004E6591D2D8EA788DC1788DC1FFFFFFFFFFFF
FFFFFFFFFFFF788DC1788DC1D2D8EA4E6591FFFF00FFFF00000000000000
0101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000FFFF00FFFF00
4E6591C3CBE3788DC1788DC1FFFFFF788DC1788DC1FFFFFF788DC1788DC1
C3CBE34E6591FFFF00FFFF000000000000000101FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0101000000000000FFFF00FFFF004E6591B4BEDC788DC1788DC1
FFFFFF788DC1788DC1FFFFFF788DC1788DC1B4BEDC4E6591FFFF00FFFF00
0000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
FFFF00FFFF004E6591A5B2D5FFFFFFFFFFFFFFFFFF788DC1788DC1FFFFFF
FFFFFFFFFFFFA5B2D54E6591FFFF00FFFF0000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E65919AA8D0
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC19AA8D04E6591
00000000000000000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF0101
01010000000000000000000000004E65918F9FCB788DC1788DC1788DC1788DC1
788DC1788DC1788DC1788DC18F9FCB4E6591000000000000000000000000
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4E65918396C6788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1
8396C64E659100000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF01010101000000000000000000000000475B834E65914E65914E6591
4E65914E65914E65914E65914E65914E65914E659144587F000000000000
000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 143 [
[(clock)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 128 moveto
26 128 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 132 moveto
13 132 lineto
13 124 lineto
6 124 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 132 moveto
14 132 lineto
14 124 lineto
6 124 lineto
closepath
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 128 moveto
12 128 lineto
stroke
10 130 moveto
10 126 lineto
stroke
grestore
gsave
22 121 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 123 [
[(block_sel)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 108 moveto
26 108 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 112 moveto
13 112 lineto
13 104 lineto
6 104 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 112 moveto
14 112 lineto
14 104 lineto
6 104 lineto
closepath
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 108 moveto
12 108 lineto
stroke
10 110 moveto
10 106 lineto
stroke
grestore
gsave
22 101 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 103 [
[(byte_adr)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 88 moveto
26 88 lineto
stroke
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 92 moveto
13 92 lineto
13 84 lineto
6 84 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 92 moveto
14 92 lineto
14 84 lineto
6 84 lineto
closepath
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 88 moveto
12 88 lineto
stroke
10 90 moveto
10 86 lineto
stroke
grestore
gsave
22 81 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 83 [
[(in_data)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 68 moveto
26 68 lineto
stroke
grestore
gsave
24 62 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 20
  /Height 12
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 12]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4B618B4E65914E65914E65914E65914E65914E65914E65914E65914E6591
4E6591495F8800000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF010101010000000000000000000000004E6591FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000
0000000000004E6591F0F2F8788DC1788DC1788DC1788DC1788DC1788DC1
788DC1788DC1F0F2F84E659100000000000000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E6591E1E5F1
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1E1E5F14E6591
0000000000000000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101000000000000FFFF00FFFF004E6591D2D8EA788DC1788DC1FFFFFFFFFFFF
FFFFFFFFFFFF788DC1788DC1D2D8EA4E6591FFFF00FFFF00000000000000
0101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000FFFF00FFFF00
4E6591C3CBE3788DC1788DC1FFFFFF788DC1788DC1FFFFFF788DC1788DC1
C3CBE34E6591FFFF00FFFF000000000000000101FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0101000000000000FFFF00FFFF004E6591B4BEDC788DC1788DC1
FFFFFF788DC1788DC1FFFFFF788DC1788DC1B4BEDC4E6591FFFF00FFFF00
0000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
FFFF00FFFF004E6591A5B2D5FFFFFFFFFFFFFFFFFF788DC1788DC1FFFFFF
FFFFFFFFFFFFA5B2D54E6591FFFF00FFFF0000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E65919AA8D0
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC19AA8D04E6591
00000000000000000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF0101
01010000000000000000000000004E65918F9FCB788DC1788DC1788DC1788DC1
788DC1788DC1788DC1788DC18F9FCB4E6591000000000000000000000000
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4E65918396C6788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1
8396C64E659100000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF01010101000000000000000000000000475B834E65914E65914E6591
4E65914E65914E65914E65914E65914E65914E659144587F000000000000
000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 63 [
[(cache_en)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 48 moveto
26 48 lineto
stroke
grestore
gsave
24 42 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 20
  /Height 12
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 12]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4B618B4E65914E65914E65914E65914E65914E65914E65914E65914E6591
4E6591495F8800000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF010101010000000000000000000000004E6591FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000
0000000000004E6591F0F2F8788DC1788DC1788DC1788DC1788DC1788DC1
788DC1788DC1F0F2F84E659100000000000000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E6591E1E5F1
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1E1E5F14E6591
0000000000000000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101000000000000FFFF00FFFF004E6591D2D8EA788DC1788DC1FFFFFFFFFFFF
FFFFFFFFFFFF788DC1788DC1D2D8EA4E6591FFFF00FFFF00000000000000
0101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000FFFF00FFFF00
4E6591C3CBE3788DC1788DC1FFFFFF788DC1788DC1FFFFFF788DC1788DC1
C3CBE34E6591FFFF00FFFF000000000000000101FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0101000000000000FFFF00FFFF004E6591B4BEDC788DC1788DC1
FFFFFF788DC1788DC1FFFFFF788DC1788DC1B4BEDC4E6591FFFF00FFFF00
0000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
FFFF00FFFF004E6591A5B2D5FFFFFFFFFFFFFFFFFF788DC1788DC1FFFFFF
FFFFFFFFFFFFA5B2D54E6591FFFF00FFFF0000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E65919AA8D0
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC19AA8D04E6591
00000000000000000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF0101
01010000000000000000000000004E65918F9FCB788DC1788DC1788DC1788DC1
788DC1788DC1788DC1788DC18F9FCB4E6591000000000000000000000000
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4E65918396C6788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1
8396C64E659100000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF01010101000000000000000000000000475B834E65914E65914E6591
4E65914E65914E65914E65914E65914E65914E659144587F000000000000
000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 43 [
[(write_en)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 28 moveto
26 28 lineto
stroke
grestore
gsave
24 22 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 20
  /Height 12
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 12]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4B618B4E65914E65914E65914E65914E65914E65914E65914E65914E6591
4E6591495F8800000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF010101010000000000000000000000004E6591FFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
00000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000
0000000000004E6591F0F2F8788DC1788DC1788DC1788DC1788DC1788DC1
788DC1788DC1F0F2F84E659100000000000000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E6591E1E5F1
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1E1E5F14E6591
0000000000000000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101000000000000FFFF00FFFF004E6591D2D8EA788DC1788DC1FFFFFFFFFFFF
FFFFFFFFFFFF788DC1788DC1D2D8EA4E6591FFFF00FFFF00000000000000
0101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000FFFF00FFFF00
4E6591C3CBE3788DC1788DC1FFFFFF788DC1788DC1FFFFFF788DC1788DC1
C3CBE34E6591FFFF00FFFF000000000000000101FFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF0101000000000000FFFF00FFFF004E6591B4BEDC788DC1788DC1
FFFFFF788DC1788DC1FFFFFF788DC1788DC1B4BEDC4E6591FFFF00FFFF00
0000000000000101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
FFFF00FFFF004E6591A5B2D5FFFFFFFFFFFFFFFFFF788DC1788DC1FFFFFF
FFFFFFFFFFFFA5B2D54E6591FFFF00FFFF0000000000000001010101FFFF
FFFFFFFFFFFFFFFFFFFF010101010000000000000000000000004E65919AA8D0
788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC19AA8D04E6591
00000000000000000000000001010101FFFFFFFFFFFFFFFFFFFFFFFF0101
01010000000000000000000000004E65918F9FCB788DC1788DC1788DC1788DC1
788DC1788DC1788DC1788DC18F9FCB4E6591000000000000000000000000
01010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000000000
4E65918396C6788DC1788DC1788DC1788DC1788DC1788DC1788DC1788DC1
8396C64E659100000000000000000000000001010101FFFFFFFFFFFFFFFF
FFFFFFFF01010101000000000000000000000000475B834E65914E65914E6591
4E65914E65914E65914E65914E65914E65914E659144587F000000000000
000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 23 [
[(read_en)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.800 0.800 0.800 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 8 moveto
26 8 lineto
stroke
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 12 moveto
13 12 lineto
13 4 lineto
6 4 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
6 12 moveto
14 12 lineto
14 4 lineto
6 4 lineto
closepath
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
8 8 moveto
12 8 lineto
stroke
10 10 moveto
10 6 lineto
stroke
grestore
gsave
22 1 translate
/DeviceRGB setcolorspace

<<
  /ImageType 1
  /Width 22
  /Height 14
  /BitsPerComponent 8
  /DataSource currentfile  /ASCIIHexDecode filter
  /ImageMatrix [1 0 0 -1 0 14]
  /Decode [0 1 0 1 0 1]
>>
1 TkPhoto
010101FFFFFFFFFFFFFFFFFF01010101010101010101000000000000000000
4B618C4E65914E65914E65914E65914E65914E65914E65914B618B000000
000000000000000000000000000000000000000000000000000000010101
FFFFFFFFFFFFFFFFFF010101010101010101010000000000000000004E6591
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000000000
000000000000000000000000000000000000000000000000010101FFFFFF
FFFFFFFFFFFFFFFFFF010101010101010000000000000000004E6591E9ECF5
788DC15E74A34E65914E65914E65914E65914E65914E65914E65914B618B
00000000000000000000000000000000000000000001FFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101010101000000FFFF00FFFF00536994D5DBEC7C90C3
4E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591000000
00000000000000000000000000000000000001FFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFF01010101000000FFFF00FFFF0060759CC6CDE48699C74E6591
E9ECF5788DC15E74A34E65914E65914E65914E65914E65914E65914E6591
4B618C00000000000000000000000001FFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFF01010101000000FFFF00FFFF0060759CFFFF00FFFF004E6591D4DAEB
788DC14E6591FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF4E6591
000000000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
0101010100000000000000000060759CFFFF00FFFF0060759CC6CDE48699C7
4E6591E9ECF5788DC1788DC1788DC1788DC1788DC1E9ECF54E6591000000
000000000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF01
0100000000000000000060759CFFFF00FFFF0060759CFFFF00FFFF004E6591
D4DAEB788DC1FFFFFFFFFFFFFFFFFF788DC1D4DAEB4E6591FFFF00FFFF00
000000000000010101FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000
00000000000055678A60759C60759C60759CFFFF00FFFF004E6591BFC7E1
788DC1FFFFFF788DC1FFFFFF788DC1BFC7E14E6591FFFF00FFFF00000000
000000010101010101FFFFFFFFFFFFFFFFFFFFFFFFFFFF0101000000000000
00000000000000000000000060759CFFFF00FFFF004E6591A9B5D7FFFFFF
FFFFFF788DC1FFFFFFFFFFFFA9B5D74E6591FFFF00FFFF00000000000000
010101010101FFFFFFFFFFFFFFFFFFFFFFFF01010101000000000000000000
00000000000000000054668A60759C60759C4E659198A7CF788DC1788DC1
788DC1788DC1788DC198A7CF4E6591000000000000000000000000010101
010101010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000
0000000000000000000000000000004E6591889AC8788DC1788DC1788DC1
788DC1788DC1889AC84E6591000000000000000000000000010101010101
010101FFFFFFFFFFFFFFFFFF01010101000000000000000000000000000000
00000000000000000000000044587E4E65914E65914E65914E65914E6591
4E65914E659144587E000000000000000000000000010101010101010101
01010101010101010101010101000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000>
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
48 3 [
[(out_data)]
] 13 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
211 361 translate
1.04054 1.03226 scale
0 -6 translate
0 6 74 161 SetClipRegion
%% including "/tmp/tmp1sd22438.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.sdata
%%CreationDate: Mon Nov 12 11:58:26 2018
%%BoundingBox: 0 6 74 161
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Fixed
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
0.0 160.0 translate
0.9596 0.9596 scale
0 -160 translate
0 160 moveto 77 160 lineto 77 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 160 moveto
77 160 lineto
77 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 160 moveto
76 160 lineto
76 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 159 moveto
75 159 lineto
75 139 lineto
1 139 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 144 [
[(1)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 139 moveto
75 139 lineto
75 119 lineto
1 119 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 124 [
[('h20)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 119 moveto
75 119 lineto
75 99 lineto
1 99 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 104 [
[('h0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 99 moveto
75 99 lineto
75 79 lineto
1 79 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 84 [
[('hzz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 79 moveto
75 79 lineto
75 59 lineto
1 59 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 64 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 59 moveto
75 59 lineto
75 39 lineto
1 39 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 44 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 39 moveto
75 39 lineto
75 19 lineto
1 19 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 24 [
[(1)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 19 moveto
75 19 lineto
75 -1 lineto
1 -1 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
3 4 [
[('hzz)]
] 13 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
287 361 translate
1.04141 1.03226 scale
0 -6 translate
0 6 483 161 SetClipRegion
%% including "/tmp/tmp1sb22438.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.sbox
%%CreationDate: Mon Nov 12 11:58:26 2018
%%BoundingBox: 0 6 483 161
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Fixed
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
0.0 160.0 translate
0.9596 0.9596 scale
0 -160 translate
0 160 moveto 503 160 lineto 503 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 160 moveto
503 160 lineto
503 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
0 160 moveto
502 160 lineto
502 0 lineto
0 0 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 159 moveto
501 159 lineto
501 139 lineto
2 139 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 139 moveto
501 139 lineto
501 119 lineto
2 119 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 119 moveto
501 119 lineto
501 99 lineto
2 99 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 99 moveto
501 99 lineto
501 79 lineto
2 79 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 79 moveto
501 79 lineto
501 59 lineto
2 59 lineto
closepath
fill
grestore
gsave
0.200 0.200 0.200 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 59 moveto
501 59 lineto
501 39 lineto
2 39 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 39 moveto
501 39 lineto
501 19 lineto
2 19 lineto
closepath
fill
grestore
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 19 moveto
501 19 lineto
501 -1 lineto
2 -1 lineto
closepath
fill
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 160 moveto
2 0 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 141 moveto
23 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 141 moveto
23 157 lineto
44 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
44 157 moveto
44 141 lineto
64 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 141 moveto
64 157 lineto
85 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
85 157 moveto
85 141 lineto
106 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
106 141 moveto
106 157 lineto
127 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
127 157 moveto
127 141 lineto
148 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
148 141 moveto
148 157 lineto
168 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
168 157 moveto
168 141 lineto
189 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
189 141 moveto
189 157 lineto
210 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
210 157 moveto
210 141 lineto
231 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
231 141 moveto
231 157 lineto
252 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
252 157 moveto
252 141 lineto
272 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
272 141 moveto
272 157 lineto
293 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
293 157 moveto
293 141 lineto
314 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
314 141 moveto
314 157 lineto
335 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
335 157 moveto
335 141 lineto
356 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
356 141 moveto
356 157 lineto
377 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
377 157 moveto
377 141 lineto
397 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
397 141 moveto
397 157 lineto
418 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
418 157 moveto
418 141 lineto
439 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
439 141 moveto
439 157 lineto
460 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
460 157 moveto
460 141 lineto
481 141 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
481 141 moveto
481 157 lineto
501 157 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
501 157 moveto
501 141 lineto
522 141 lineto
stroke
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 129 moveto
4 137 lineto
21 137 lineto
23 129 lineto
21 121 lineto
4 121 lineto
2 129 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
8 126 translate
6 7 true matrix {
<40607078706040>
} imagemask
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
8 124 [
[()]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 129 moveto
25 137 lineto
62 137 lineto
64 129 lineto
62 121 lineto
25 121 lineto
23 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
29 124 [
[(00)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 129 moveto
66 137 lineto
187 137 lineto
189 129 lineto
187 121 lineto
66 121 lineto
64 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
70 124 [
[(02)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
189 129 moveto
191 137 lineto
354 137 lineto
356 129 lineto
354 121 lineto
191 121 lineto
189 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
195 124 [
[(20)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
356 129 moveto
358 137 lineto
395 137 lineto
397 129 lineto
395 121 lineto
358 121 lineto
356 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
362 124 [
[(01)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
397 129 moveto
399 137 lineto
437 137 lineto
439 129 lineto
437 121 lineto
399 121 lineto
397 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
403 124 [
[(02)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
439 129 moveto
441 137 lineto
2081 137 lineto
2083 129 lineto
2081 121 lineto
441 121 lineto
439 129 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
445 124 [
[(20)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 109 moveto
4 117 lineto
21 117 lineto
23 109 lineto
21 101 lineto
4 101 lineto
2 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
8 104 [
[(U)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 109 moveto
25 117 lineto
62 117 lineto
64 109 lineto
62 101 lineto
25 101 lineto
23 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
29 104 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 109 moveto
66 117 lineto
187 117 lineto
189 109 lineto
187 101 lineto
66 101 lineto
64 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
70 104 [
[(1)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
189 109 moveto
191 117 lineto
395 117 lineto
397 109 lineto
395 101 lineto
191 101 lineto
189 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
195 104 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
397 109 moveto
399 117 lineto
437 117 lineto
439 109 lineto
437 101 lineto
399 101 lineto
397 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
403 104 [
[(1)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
439 109 moveto
441 117 lineto
2081 117 lineto
2083 109 lineto
2081 101 lineto
441 101 lineto
439 109 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
445 104 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 89 moveto
4 97 lineto
21 97 lineto
23 89 lineto
21 81 lineto
4 81 lineto
2 89 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
8 86 translate
6 7 true matrix {
<40607078706040>
} imagemask
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
8 84 [
[()]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 0.647 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 89 moveto
64 89 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
25 84 [
[(zz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 89 moveto
66 97 lineto
187 97 lineto
189 89 lineto
187 81 lineto
66 81 lineto
64 89 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
70 84 [
[(FF)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 0.647 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
189 89 moveto
231 89 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
191 84 [
[(zz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
231 89 moveto
233 97 lineto
312 97 lineto
314 89 lineto
312 81 lineto
233 81 lineto
231 89 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
237 84 [
[(5F)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 0.647 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
314 89 moveto
2083 89 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
316 84 [
[(zz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 61 moveto
2 61 lineto
2 77 lineto
23 77 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 77 moveto
23 61 lineto
106 61 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
106 61 moveto
106 77 lineto
481 77 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
481 77 moveto
481 61 lineto
2083 61 lineto
stroke
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 41 moveto
2 41 lineto
2 57 lineto
23 57 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 57 moveto
23 41 lineto
64 41 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 41 moveto
64 57 lineto
148 57 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
148 57 moveto
148 41 lineto
231 41 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
231 41 moveto
231 57 lineto
272 57 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
272 57 moveto
272 41 lineto
2083 41 lineto
stroke
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 21 moveto
2 21 lineto
2 37 lineto
23 37 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
23 37 moveto
23 21 lineto
64 21 lineto
stroke
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
64 21 moveto
64 37 lineto
2083 37 lineto
stroke
grestore
gsave
1.000 0.647 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 9 moveto
106 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
4 4 [
[(zz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
106 9 moveto
108 17 lineto
187 17 lineto
189 9 lineto
187 1 lineto
108 1 lineto
106 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
112 4 [
[(FF)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
189 9 moveto
191 17 lineto
229 17 lineto
231 9 lineto
229 1 lineto
191 1 lineto
189 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
195 4 [
[(UU)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
231 9 moveto
233 17 lineto
354 17 lineto
356 9 lineto
354 1 lineto
233 1 lineto
231 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
237 4 [
[(5F)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.600 0.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
356 9 moveto
358 17 lineto
395 17 lineto
397 9 lineto
395 1 lineto
358 1 lineto
356 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
362 4 [
[(UU)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
397 9 moveto
399 17 lineto
437 17 lineto
439 9 lineto
437 1 lineto
399 1 lineto
397 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
403 4 [
[(FF)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0.000 1.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
439 9 moveto
441 17 lineto
479 17 lineto
481 9 lineto
479 1 lineto
441 1 lineto
439 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
445 4 [
[(5F)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 0.647 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
481 9 moveto
2083 9 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
483 4 [
[(zz)]
] 13 0 0.85 0 false DrawText
grestore
gsave
0 160 moveto
503 160 lineto
503 0 lineto
0 0 lineto
closepath
clip
newpath
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
gsave

% including file "lib/blt2.4/bltCanvEps.pro"

%
% PostScript encapulator prolog file of the BLT "eps" canvas item.
%
% Copyright 1991-1997 Bell Labs Innovations for Lucent Technologies.
%
% Permission to use, copy, modify, and distribute this software and its
% documentation for any purpose and without fee is hereby granted, provided
% that the above copyright notice appear in all copies and that both that the
% copyright notice and warranty disclaimer appear in supporting documentation,
% and that the names of Lucent Technologies any of their entities not be used
% in advertising or publicity pertaining to distribution of the software
% without specific, written prior permission.
%
% Lucent Technologies disclaims all warranties with regard to this software,
% including all implied warranties of merchantability and fitness.  In no event
% shall Lucent Technologies be liable for any special, indirect or
% consequential damages or any damages whatsoever resulting from loss of use,
% data or profits, whether in an action of contract, negligence or other
% tortuous action, arising out of or in connection with the use or performance
% of this software.
%

%
% The definitions of the next two macros are from Appendix H of 
% Adobe's "PostScript Language Reference Manual" pp. 709-736.
% 

% Prepare for EPS file

/BeginEPSF {				
  /beforeInclusionState save def
  /dictCount countdictstack def		% Save the # objects in the dictionary
  /opCount count 1 sub def		% Count object on operator stack
  userdict begin			% Make "userdict" the current 
					% dictionary
    /showpage {} def			% Redefine showpage to be null
    0 setgray 
    0 setlinecap
    1 setlinewidth
    0 setlinejoin
    10 setmiterlimit
    [] 0 setdash
    newpath
    /languagellevel where {
      pop languagelevel 
      1 ne {
	false setstrokeadjust false setoverprint
      } if
    } if
    % note: no "end"
} bind def

/EndEPSF { %def
  count opCount sub {
    pop
  } repeat
  countdictstack dictCount sub { 
  end					% Clean up dictionary stack
  } repeat
  beforeInclusionState restore
} bind def


%
% Set up a clip region based upon a bounding box (x1, y1, x2, y2).
%
/SetClipRegion {
  % Stack: x1 y1 x2 y2
  newpath
  4 2 roll moveto
  1 index 0 rlineto
  0 exch rlineto
  neg 0 rlineto
  closepath
  clip
  newpath
} def

BeginEPSF
287 521 translate
1.04141 1.01515 scale
0 -2 translate
0 2 483 68 SetClipRegion
%% including "/tmp/tmp1mx22438.ps"

%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Maxim Widget
%%Title: Window .printEngine1.raw.maxis
%%CreationDate: Mon Nov 12 11:58:27 2018
%%BoundingBox: 0 2 483 68
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Fixed
%%EndComments

%%BeginProlog
/CurrentEncoding [
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quotesingle
/parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
/zero/one/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal/greater/question
/at/A/B/C/D/E/F/G
/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W
/X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
/grave/a/b/c/d/e/f/g
/h/i/j/k/l/m/n/o
/p/q/r/s/t/u/v/w
/x/y/z/braceleft/bar/braceright/asciitilde/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/exclamdown/cent/sterling/currency/yen/brokenbar/section
/dieresis/copyright/ordfeminine/guillemotleft/logicalnot/hyphen/registered/macron
/degree/plusminus/twosuperior/threesuperior/acute/mu/paragraph/periodcentered
/cedilla/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters/questiondown
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/space/space/space/space/space/space/space/space
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide
/oslash/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis
] def

50 dict begin
% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: mkpsenc.tcl,v 1.3 2002/07/19 14:37:21 drh Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def


/cstringshow {
    {
	dup type /stringtype eq
	{ show } { glyphshow }
	ifelse
    }
    forall
} bind def



/cstringwidth {
    0 exch 0 exch
    {
	dup type /stringtype eq
	{ stringwidth } { 
	    currentfont /Encoding get exch 1 exch put (\001) stringwidth 
        }
	ifelse 
	exch 3 1 roll add 3 1 roll add exch
    }
    forall
} bind def

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to current system encoding.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding CurrentEncoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	cstringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup cstringwidth pop
	justify neg mul 0 moveto
	stipple {
	   
 
	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		dup type /stringtype eq {
		    % This segment is a string.
		    {
		        char 0 3 -1 roll put
		        currentpoint
		        gsave
		        char true charpath clip StippleText
		        grestore
		        char stringwidth translate
		        moveto
		    } forall
		} {
		    % This segment is glyph name
		    % Temporary override
		    currentfont /Encoding get exch 1 exch put
		    currentpoint
		    gsave (\001) true charpath clip StippleText
		    grestore
	            (\001) stringwidth translate
		    moveto
		} ifelse
	    } forall
	    grestore 
	} {cstringshow} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Fixed
%%EndSetup

%%Page: 1 1
save
0.0 67.0 translate
0.9596 0.9596 scale
0 -67 translate
0 67 moveto 503 67 lineto 503 0 lineto 0 0 lineto closepath clip newpath
gsave
gsave
0 67 moveto
503 67 lineto
503 0 lineto
0 0 lineto
closepath
clip
newpath
gsave
0.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
1 66 moveto
501 66 lineto
501 1 lineto
1 1 lineto
closepath
fill
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 1 moveto
2 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
4 7 [
[(0)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
10 1 moveto
10 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
19 1 moveto
19 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
27 1 moveto
27 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
35 1 moveto
35 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
44 1 moveto
44 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
46 7 [
[(10ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
52 1 moveto
52 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
60 1 moveto
60 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
69 1 moveto
69 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
77 1 moveto
77 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
85 1 moveto
85 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
87 7 [
[(20ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
94 1 moveto
94 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
102 1 moveto
102 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
110 1 moveto
110 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
119 1 moveto
119 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
127 1 moveto
127 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
129 7 [
[(30ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
135 1 moveto
135 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
143 1 moveto
143 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
152 1 moveto
152 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
160 1 moveto
160 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
168 1 moveto
168 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
170 7 [
[(40ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
177 1 moveto
177 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
185 1 moveto
185 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
193 1 moveto
193 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
202 1 moveto
202 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
210 1 moveto
210 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
212 7 [
[(50ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
218 1 moveto
218 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
227 1 moveto
227 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
235 1 moveto
235 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
243 1 moveto
243 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
252 1 moveto
252 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
254 7 [
[(60ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
260 1 moveto
260 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
268 1 moveto
268 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
277 1 moveto
277 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
285 1 moveto
285 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
293 1 moveto
293 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
295 7 [
[(70ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
302 1 moveto
302 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
310 1 moveto
310 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
318 1 moveto
318 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
327 1 moveto
327 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
335 1 moveto
335 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
337 7 [
[(80ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
343 1 moveto
343 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
352 1 moveto
352 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
360 1 moveto
360 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
368 1 moveto
368 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
377 1 moveto
377 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
379 7 [
[(90ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
385 1 moveto
385 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
393 1 moveto
393 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
401 1 moveto
401 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
410 1 moveto
410 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
418 1 moveto
418 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
420 7 [
[(100ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
426 1 moveto
426 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
435 1 moveto
435 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
443 1 moveto
443 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
451 1 moveto
451 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
460 1 moveto
460 18 lineto
stroke
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
462 7 [
[(110ns)]
] 13 0 0.85 0 false DrawText
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
468 1 moveto
468 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
476 1 moveto
476 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
485 1 moveto
485 3 lineto
stroke
grestore
gsave
1.000 1.000 1.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
493 1 moveto
493 3 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 50 moveto
2 1 lineto
stroke
grestore
gsave
1.000 0.000 0.000 setrgbcolor AdjustColor
0 setlinecap
0 setlinejoin
1 setlinewidth
2 50 moveto
2 34 lineto
80 34 lineto
80 50 lineto
2 50 lineto
closepath
fill
grestore
gsave
/Fixed findfont 12 scalefont ISOEncode setfont
1.000 1.000 1.000 setrgbcolor AdjustColor
5 37 [
[(Baseline = 0)]
] 13 0 0.85 0 false DrawText
grestore
grestore
grestore
restore showpage

%%Trailer
end
%%EOF

EndEPSF
grestore
restore showpage

%%Trailer
end
%%EOF

